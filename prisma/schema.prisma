// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

model AdminUser {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userid], references: [id], onDelete: Cascade)
  userid    String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TextChannel {
  id        String    @id @default(cuid())
  name      String
  server    Server    @relation(fields: [serverid], references: [id])
  serverid  String
  messages  Message[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Message {
  id              String       @id @default(cuid())
  content         String
  author          User         @relation(fields: [authorId], references: [id])
  authorId        String
  color           String?      @default("#fff")
  backgroundColor String?      @default("#00000000")
  mentionedRoles  Role[]
  mentionedUser   User[]       @relation(name: "mentions")
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  textChannel     TextChannel? @relation(fields: [textChannelId], references: [id])
  textChannelId   String?
}

model Role {
  id          String       @id @default(cuid())
  name        String
  permissions Permission[]
  server      Server       @relation(fields: [serverid], references: [id])
  serverid    String       @unique
  users       User[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  mentionedIn Message[]
  visible     Boolean
}

model Server {
  id          String        @id @default(cuid())
  name        String
  users       User[]        @relation(name: "users")
  roles       Role[]
  textchannel TextChannel[]
  //voicechannel VoiceChannel[]
  owner       User          @relation(fields: [ownerid], references: [id])
  ownerid     String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  bannedUser  User[]        @relation(name: "bannedusers")
  pfp         String?
  banner      String?
}

enum Permission {
  READ
  SEND_MESSAGES
  KICK
  BAN
  MANAGE_MESSAGES
}

// Necessary for Next auth
model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String?       @unique
  emailVerified DateTime?
  image         String?
  status        OnlineStatus?
  accounts      Account[]
  sessions      Session[]
  adminuser     AdminUser?
  messages      Message[]
  mentionedin   Message[]     @relation(name: "mentions")
  server        Server[]      @relation(name: "users")
  bannedon      Server[]      @relation(name: "bannedusers")
  ownerof       Server[]
  roles         Role[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum OnlineStatus {
  ONLINE
  AWAY
  DND
  OFFLINE
}
