generator client {
    provider = "prisma-client-js"
}

generator zod {
    provider          = "prisma-zod-generator"
    output            = "./zod"
    isGenerateSelect  = false
    isGenerateInclude = false
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model AdminUser {
    id        String   @id @default(uuid())
    userid    String   @unique
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    user      User     @relation(fields: [userid], references: [id], onDelete: Cascade)
}

model TextChannel {
    id          String       @id @default(uuid())
    name        String
    serverid    String
    createdAt   DateTime     @default(now())
    updatedAt   DateTime     @updatedAt
    categoryid  String?
    permissions Permission[]
    position    Int          @default(0)
    messages    Message[]
    category    Category?    @relation(fields: [categoryid], references: [id])
    server      Server       @relation(fields: [serverid], references: [id])
}

model VoiceChannel {
    id          String       @id @default(uuid())
    name        String
    serverid    String
    createdAt   DateTime     @default(now())
    updatedAt   DateTime     @updatedAt
    categoryid  String?
    permissions Permission[]
    position    Int          @default(0)
    members     Member[]
    category    Category?    @relation(fields: [categoryid], references: [id])
    server      Server       @relation(fields: [serverid], references: [id])
}

model Category {
    id            String         @id @default(uuid())
    name          String
    serverid      String
    permissions   Permission[]
    position      Int            @default(0)
    server        Server         @relation(fields: [serverid], references: [id])
    textchannels  TextChannel[]
    voicechannels VoiceChannel[]
}

model Message {
    id               String      @id @default(uuid())
    content          String
    authorId         String
    color            String?     @default("#fff")
    backgroundColor  String?     @default("#00000000")
    createdAt        DateTime    @default(now())
    updatedAt        DateTime    @updatedAt
    textChannelId    String
    author           Member      @relation(fields: [authorId], references: [id], "messagesSent")
    textChannel      TextChannel @relation(fields: [textChannelId], references: [id])
    mentionedRoles   Role[]      @relation("MessageToRole")
    mentionedMembers Member[]    @relation("mentions")
}

model Role {
    id          String       @id @default(uuid())
    name        String
    permissions Permission[]
    serverid    String
    createdAt   DateTime     @default(now())
    updatedAt   DateTime     @updatedAt
    visible     Boolean
    color       String       @default("fff")
    position    Int          @default(0)
    server      Server       @relation(fields: [serverid], references: [id])
    mentionedIn Message[]    @relation("MessageToRole")
    members     Member[]
}

model Server {
    id           String         @id @default(uuid())
    name         String
    ownerid      String         @unique
    pfp          String         @default("")
    banner       String         @default("")
    categories   Category[]
    roles        Role[]
    textchannel  TextChannel[]
    voicechannel VoiceChannel[]
    owner        Member         @relation("ownerOf", fields: [ownerid], references: [id], onDelete: Cascade)
    members      Member[]       @relation("members")
    bannedUser   User[]         @relation("bannedusers")
    actionLog    ActionLog?
    updatedAt    DateTime       @updatedAt
    createdAt    DateTime       @default(now())
}

model Account {
    id                String   @id @default(uuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?
    createdAt         DateTime @default(now())
    updatedAt         DateTime @updatedAt
    user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(uuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Member {
    id             String        @id @default(uuid())
    user           User          @relation(fields: [userId], references: [id])
    userId         String
    pfp            String?
    banner         String?
    nickname       String?
    roles          Role[]
    ownerOf        Server?       @relation("ownerOf")
    server         Server?       @relation("members", fields: [serverId], references: [id], onDelete: Cascade)
    actionType     ActionType[]
    mentionedIn    Message[]     @relation("mentions")
    messages       Message[]     @relation("messagesSent")
    voiceChannel   VoiceChannel? @relation(fields: [voiceChannelId], references: [id])
    voiceChannelId String?
    serverId       String?
}

model User {
    id            String        @id @default(uuid())
    name          String
    email         String        @unique
    emailVerified DateTime?
    image         String
    banner        String?
    status        OnlineStatus  @default(OFFLINE)
    createdAt     DateTime      @default(now())
    updatedAt     DateTime      @updatedAt
    accounts      Account[]
    adminuser     AdminUser?
    sessions      Session[]
    settings      UserSettings?
    bannedon      Server[]      @relation("bannedusers")
    friends       User[]        @relation("friends")
    friendsWith   User[]        @relation("friends")
    member        Member[]
}

model ActionLog {
    id       String       @id @default(uuid())
    server   Server       @relation(fields: [serverId], references: [id])
    serverId String       @unique
    actions  ActionType[]
}

model ActionType {
    id          String    @id @default(uuid())
    member      Member    @relation(fields: [memberId], references: [id])
    memberId    String
    action      Action
    actionlog   ActionLog @relation(fields: [actionlogid], references: [id])
    actionlogid String
    createdAt   DateTime  @default(now())
}

model UserSettings {
    id     String @id @default(uuid())
    userid String @unique
    user   User   @relation(fields: [userid], references: [id])
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

enum Permission {
    BAN_MEMBERS
    KICK_MEMBERS
    MANAGE_MEMBERS
    MANAGE_MESSAGES
    MANAGE_SERVER

    // everyone Role
    READ_MESSAGES
    SEND_MESSAGES
    // everyone Role
}

enum OnlineStatus {
    ONLINE
    AWAY
    DND
    OFFLINE
}

enum Action {
    // default
    MESSAGE_DELETE
    BAN_USER
    KICK_USER
    // default

    MESSAGE_EDIT
    MESSAGE_SEND
    CREATE_VOICE_CHANNEL
    CREATE_TEXT_CHANNEL
    DELETE_ROLE
    CREATE_ROLE
    UPDATE_ROLE
    DELETE_VOICE_CHANNEL
    DELETE_TEXT_CHANNEL
    JOIN_VOICE_CHANNEL
    LEAVE_VOICE_CHANNEL
    JOIN_SERVER
    LEAVE_SERVER
}
